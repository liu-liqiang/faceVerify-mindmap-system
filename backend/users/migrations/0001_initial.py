# Generated by Django 5.2.3 on 2025-07-05 00:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('real_name', models.CharField(blank=True, default='', help_text='真实姓名', max_length=50, verbose_name='姓名')),
                ('police_number', models.CharField(blank=True, db_index=True, help_text='警员编号', max_length=20, null=True, unique=True, verbose_name='警号')),
                ('phone_number', models.CharField(blank=True, default='', help_text='联系手机号', max_length=11, verbose_name='手机号码')),
                ('department', models.CharField(choices=[('direct', '市局直属部门'), ('tianyuan', '天元分局'), ('lusong', '芦淞分局'), ('hetang', '荷塘分局'), ('shifeng', '石峰分局'), ('dongjiabai', '董家塅分局'), ('kaifaqu', '经开区分局'), ('lukou', '渌口分局'), ('liling', '醴陵市公安局'), ('youxian', '攸县公安局'), ('chaling', '茶陵县公安局'), ('yanling', '炎陵县公安局')], default='direct', max_length=20, verbose_name='所属单位')),
                ('status', models.CharField(choices=[('pending', '待审核'), ('approved', '已审核'), ('rejected', '已拒绝'), ('suspended', '已停用')], default='pending', max_length=20, verbose_name='审核状态')),
                ('rejection_reason', models.TextField(blank=True, help_text='审核拒绝时的原因说明', verbose_name='拒绝原因')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='审核时间')),
                ('face_encodings', models.TextField(blank=True, help_text='存储人脸特征编码数据，JSON格式，支持多个128维特征向量')),
                ('is_face_registered', models.BooleanField(default=False, help_text='是否已注册人脸')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='审核人')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('police_number', models.CharField(max_length=20, verbose_name='警号')),
                ('attempt_type', models.CharField(choices=[('password', '密码登录'), ('face', '人脸识别'), ('combined', '密码+人脸')], max_length=20, verbose_name='登录方式')),
                ('result', models.CharField(choices=[('success', '成功'), ('failed', '失败')], max_length=20, verbose_name='登录结果')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('user_agent', models.TextField(blank=True, verbose_name='用户代理')),
                ('failure_reason', models.CharField(blank=True, max_length=200, verbose_name='失败原因')),
                ('face_confidence', models.FloatField(blank=True, null=True, verbose_name='人脸识别置信度')),
                ('attempted_at', models.DateTimeField(auto_now_add=True, verbose_name='尝试时间')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='login_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '登录尝试',
                'verbose_name_plural': '登录尝试记录',
                'ordering': ['-attempted_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
